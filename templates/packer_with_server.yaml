AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Ubuntu 18.04 with Packer and AWS Key Identity and base Packer Build for Ubuntu
  20.04 with Shell provisioning
Mappings:
  SubnetConfig:
    VPC:
      CIDR: 10.0.0.0/16
    Public1:
      CIDR: 10.0.1.0/24
Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      CidrBlock: !FindInMap 
        - SubnetConfig
        - VPC
        - CIDR
  PublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select 
        - '0'
        - !GetAZs ''
      CidrBlock: !FindInMap 
        - SubnetConfig
        - Public1
        - CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackName'
        - Key: Network
          Value: Public1
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackName'
        - Key: Network
          Value: Public
  GatewayToInternet:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackName'
        - Key: Network
          Value: Public
  PublicRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: GatewayToInternet
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicSubnetRouteTableAssociation1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable
  PublicNetworkAcl:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackName'
        - Key: Network
          Value: Public
  InboundHTTPPublicNetworkAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: '100'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '80'
        To: '80'
  InboundHTTPSPublicNetworkAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: '101'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '443'
        To: '443'
  InboundSSHPublicNetworkAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: '102'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '22'
        To: '22'
  InboundEmphemeralPublicNetworkAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: '103'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '1024'
        To: '65535'
  OutboundPublicNetworkAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: '100'
      Protocol: '6'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '0'
        To: '65535'
  PublicSubnetNetworkAclAssociation1:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet1
      NetworkAclId: !Ref PublicNetworkAcl
  EC2SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable access to the EC2 host
      Tags:
        - Key: Class
          Value: packer
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '3000'
          ToPort: '3000'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '0'
          ToPort: '65535'
          CidrIp: 0.0.0.0/0
        - IpProtocol: icmp
          FromPort: '-1'
          ToPort: '-1'
          CidrIp: 0.0.0.0/0
  SGBaseIngress:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref EC2SecurityGroup
      IpProtocol: tcp
      FromPort: '80'
      ToPort: '80'
      SourceSecurityGroupId: !Ref EC2SecurityGroup
  AccessKey:
    Type: 'AWS::IAM::AccessKey'
    Properties:
      UserName: cloud_user
  PublicInstance1:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: t3.small
      ImageId: ami-081fff3bb02e0a469
      UserData: !Base64 
        'Fn::Join':
          - ''
          - - |
              #!/bin/bash
            - |
              /bin/echo 'cloud_user:SSXdXRqGDj' | /usr/sbin/chpasswd
            - |
              hostnamectl set-hostname workstation
            - |
              groupadd cloud_user
            - |
              usermod cloud_user -g cloud_user
            - |
              apt install unzip -y
            - >
              curl
              https://releases.hashicorp.com/packer/1.5.6/packer_1.5.6_linux_amd64.zip
              -o packer.zip
            - |
              unzip packer.zip
            - |
              mv packer /usr/bin/packer
            - >
              curl
              https://raw.githubusercontent.com/linuxacademy/content-hashicorp-packer/master/env/vimrc
              -o /home/cloud_user/.vimrc
            - |
              chown -R cloud_user:cloud_user /home/cloud_user/.vimrc
            - |
              mkdir -p /home/cloud_user/.vim/pack/jvirtanen/start
            - >
              git clone https://github.com/jvirtanen/vim-hcl.git
              /home/cloud_user/.vim/pack/jvirtanen/start/vim-hcl
            - |
              chown -R cloud_user:cloud_user /home/cloud_user/.vim
            - |
              mkdir -p /home/cloud_user/packer/bookapp
            - >
              git clone
              https://github.com/linuxacademy/content-hashicorp-packer.git
              /tmp/files
            - >
              mv /tmp/files/labfiles/chef/packer.json
              /home/cloud_user/packer/bookapp/
            - |
              chown -R cloud_user:cloud_user /home/cloud_user/packer
            - |
              su cloud_user -c 'mkdir /home/cloud_user/.chef'
            - >
              su cloud_user -c 'cp /tmp/files/labfiles/chef/config.rb
              /home/cloud_user/.chef/config.rb'
            - |
              su cloud_user -c 'knife supermarket install apache2'
            - |
              sleep 15
            - >
              su cloud_user -c 'mkdir
              /home/cloud_user/chef-repo/cookbooks/apache2/recipes'
            - >
              su cloud_user -c 'mkdir
              /home/cloud_user/chef-repo/cookbooks/apache2/files/default'
            - >
              su cloud_user -c 'cp -r /tmp/files/sample-website
              /home/cloud_user/chef-repo/cookbooks/apache2/files/default/bookapp'
            - >
              su cloud_user -c 'cp /tmp/files/labfiles/chef/bookapp.rb
              /home/cloud_user/chef-repo/cookbooks/apache2/recipes/bookapp.rb'
            - >
              su cloud_user -c 'cp /tmp/files/labfiles/chef/basic_site.conf.erb
              /home/cloud_user/chef-repo/cookbooks/apache2/templates/basic_site.conf.erb'
            - |
              su cloud_user -c 'knife ssl fetch'
            - |
              su cloud_user -c 'knife cookbook upload apache2'
      NetworkInterfaces:
        - GroupSet:
            - !Ref EC2SecurityGroup
          PrivateIpAddress: 10.0.1.100
          AssociatePublicIpAddress: 'true'
          DeviceIndex: '0'
          DeleteOnTermination: 'true'
          SubnetId: !Ref PublicSubnet1
  PublicInstance2:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: t3.medium
      ImageId: ami-031273eebcb2cc66f
      UserData: !Base64 
        'Fn::Join':
          - ''
          - - |
              #!/bin/bash
            - |
              /bin/echo 'cloud_user:SSXdXRqGDj' | /usr/sbin/chpasswd
            - |
              hostnamectl set-hostname chef.ec2.internal
      NetworkInterfaces:
        - GroupSet:
            - !Ref EC2SecurityGroup
          PrivateIpAddress: 10.0.1.101
          AssociatePublicIpAddress: 'true'
          DeviceIndex: '0'
          DeleteOnTermination: 'true'
          SubnetId: !Ref PublicSubnet1
Outputs:
  pubIpAddress1:
    Description: Public IP address of Ubuntu 18.04 Workstation
    Value: !GetAtt 
      - PublicInstance1
      - PublicIp
  privIpAddress1:
    Description: Private IP address of Ubuntu 18.04 Workstation
    Value: !GetAtt 
      - PublicInstance1
      - PrivateIp
  pubIpAddress2:
    Description: Public IP address Chef Infra Server
    Value: !GetAtt 
      - PublicInstance2
      - PublicIp
  privIpAddress2:
    Description: Private IP address of Chef Infra Server
    Value: !GetAtt 
      - PublicInstance2
      - PrivateIp
  pubIpAddress3:
    Description: cloud_user Access Key
    Value: !Ref AccessKey
  pubIpAddress4:
    Description: cloud_user Secret Access Key
    Value: !GetAtt 
      - AccessKey
      - SecretAccessKey
  pubIpAddress5:
    Description: SubnetID
    Value: !Ref PublicSubnet1

